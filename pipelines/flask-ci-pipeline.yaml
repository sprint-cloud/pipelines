apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: flask-ci-pipeline
spec:
  params:
    - name: repo_url
    - name: revision
    - name: app-image
    - name: app-image-tag
    - name: app-name
    - name: testing     
      default: true
    - name: build
      default: true
    - name: release-env
      default: none
  workspaces:
    - name: source
    - name: basic-auth
    - name: dockerconfig
    - name: app-manifests
    - name: ssh-creds
  tasks:
    - name: fetch-repository
      taskRef:
        name: git-clone
      workspaces:
        - name: output
          workspace: source
        - name: basic-auth
          workspace: basic-auth
      params:
        - name: url
          value: $(params.repo_url)
        - name: revision
          value: $(params.revision)
    - name: create-venv
      taskRef: 
        name: init-venv
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: source
      when:
        - input: $(params.testing)
          operator: in
          values: ["true"]

    - name: linting
      taskRef: 
        name: pylint
      runAfter:
        - create-venv
      workspaces:
        - name: source
          workspace: source
      params:
        - name: path
          value: $(params.app-name)
      when:
        - input: $(params.testing)
          operator: in
          values: ["true"]
    - name: unit-testing
      taskRef: 
        name: pytest
      runAfter:
        - linting
      workspaces:
        - name: source
          workspace: source
      when:
        - input: $(params.testing)
          operator: in
          values: ["true"]

    - name: build-image
      taskRef:
        name: kaniko
      runAfter:
        - unit-testing
      workspaces:
        - name: source
          workspace: source
        - name: dockerconfig
          workspace: dockerconfig
      params:
        - name: IMAGE
          value: $(params.app-image):$(params.app-image-tag)
      when:
        - input: $(params.build)
          operator: in
          values: ["true"]
    - name: release-app-to-staging
      taskRef:
        name: git-cli
      runAfter:
        - build-image
      workspaces:
        - name: source
          workspace: app-manifests
        - name: ssh-directory
          workspace: ssh-creds
      when:
        - input: $(params.release-env)
          operator: notin
          values: ["none"]
      params:
        - name: GIT_USER_NAME
          value: Sprint-Pipeline
        - name: GIT_USER_EMAIL
          value: noreply@example.com
        - name: GIT_SCRIPT
          value: |
            git clone git@github.com:sprint-cloud/sprint-apps.git

            # Create template
            cd sprint-apps
            cat > $(params.release-env)/$(params.app-name).yaml << EOL
            apiVersion: argoproj.io/v1alpha1
            kind: Application
            metadata:
              name: $(params.app-name)-$(params.release-env)
              namespace: argocd
              annotations:
                notifications.argoproj.io/subscribe.on-deployed.slack: deployment
            spec:
              destination:
                namespace: sprint-$(params.release-env)
                server: https://kubernetes.default.svc
              project: sprint-$(params.release-env)
              source:
                chart: sprint-flask-app
                repoURL: https://sprint-cloud.github.io/helm-charts
                targetRevision: "0.1"
                helm:
                  values: |-
                      image: 
                        repository: $(params.app-image)
                        tag: $(params.app-image-tag)
              syncPolicy:
                automated:
                  selfHeal: true
                  prune: true
            EOL
            
            git add $(params.release-env)/$(params.app-name).yaml
            git commit -m "CI/CD pipeline: update to image $(params.app-image)"
            git push
